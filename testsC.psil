;; Expressions "let"
(def test1 (let ((x 0)) (let ((x 1)) (* x 1))))                 ; ↝ 1 : Int

(def test2 (let ((x 0)) (let ((x 0)) (let ((x 1)) (* x 2)))))   ; ↝ 2 : Int

(dec test3 Int)
(def test3 (if0 (- test2 2) (let ((x 10)) (let ((x 1)) (* x 3))) 0))  ; ↝ 3 : Int

;; Appel de fonctions à 1 argument
(dec test4 (Int -> Int))
(def test4 (fun y (+ y 2)))                                     ; ↝ <fonction> : Int -> Int
(def test4a (test4 2))                                          ; ↝ 4 : Int

;; Appel de fonction à 2 arguments
(dec test5 (Int Int -> Int))
(def test5 (fun x (fun y (+ y x))))                             ; ↝ <fermeture> : Int -> Int -> Int
(def test5a (test5 2 3))                                        ; ↝ 5 : Int

;; Fonction définie avec une fonction partiellement évaluée
(dec test6 (Int -> Int))
(def test6 (test5 9))                                           ; <fermture> : Int -> Int
(def test6a (test6 (-3)))                                        ; ↝ 6 : Int

;; Fonction évaluant une expression "let" ??
;; TODO

;; Récursion
;; TODO

;; Vérifications de types
(def test10a (: 20 Int))
(def test10b (: (if0 0) (Int Int -> Int)))
(def test10c (: (+ 1) (Int -> Int)))
(def test10d (: test5 (Int Int -> Int)))
(def test10e (: (fun x (fun y (+ y x))) (Int Int -> Int)))