Lfun "y" (Lapp (Lapp (Lvar "+") (Lvar "y")) 
               (Lnum 5))


____________________________________________________

ghci> sexpOf "(Int Int -> Int)"
Scons (Scons (Scons (Scons Snil (Ssym "Int")) 
                    (Ssym "Int")) 
             (Ssym "->")) 
      (Ssym "Int")

s2t (Ssym "Int") = Lint
s2t (Scons Snil e) = s2t e 
s2t (Scons e (Ssym "->")) = s2t e
s2t (Scons e1 e2) = Larw (s2t e1) (s2t e2) 

Scons (Scons (Scons (Scons Snil (Ssym "Int")) (Ssym "Int")) (Ssym "->")) (Ssym "Int")
= Larw (s2t e1) (s2t e2) 

s2t e1 = s2t (Scons (Scons (Scons Snil (Ssym "Int")) (Ssym "Int")) (Ssym "->"))
       = s2t (Scons (Scons Snil (Ssym "Int")) (Ssym "Int"))
       = Larw (s2t (Scons Snil (Ssym "Int"))) (s2t (Ssym "Int")) 
       = Larw (s2t (Ssym "Int")) (s2t (Ssym "Int"))
       = Larw Lint Lint

s2t e2 = s2t (Ssym "Int") = Lint

Larw (s2t e1) (s2t e2) = 
Larw (Larw Lint Lint) (Lint)

----------------------------------------------------------------------------------------
(def f1 (fun x (fun y (+ y 5))))                 ; ‚Üù <fonction> : Int -> Int -> Int
f1 = \x -> \y -> y+5

*** Exception: Incapable de trouver le type de: 
Lfun "x" (Lfun "y" (Lapp (Lapp (Lvar "+") (Lvar "y")) (Lnum 5)))




ghci> sexpOf "(+ 2 5)"
      Scons (Scons (Scons Snil (Ssym "+")) 
                   (Snum 2)) 
            (Snum 5)
ghci> sexpOf "((+ 2) 4)"
      Scons (Scons Snil 
                   (Scons (Scons Snil (Ssym "+")) (Snum 2))) 
            (Snum 4)


ghci> lexpOf " ((+ 2) 4)"
     Lapp (Lapp (Lvar "+") (Lnum 2))
          (Lnum 4)

ghci> lexpOf "(+ 2 5)"
    Lapp (Lapp (Lvar "+") (Lnum 2)) 
         (Lnum 5)


(f a b c) va retourner :

Lapp (Lapp (Lapp (Lvar "f") (Lvar "a")) (Lvar "b")) (Lvar "c")



Exemple 4:

(def r4 (+ (: 2 Int)))
     Scons (Scons (Scons Snil (Ssym "def")) (Ssym "r4")) (Scons (Scons Snil (Ssym "+")) (Scons (Scons (Scons Snil (Ssym ":")) (Snum 2)) (Ssym "Int")))
s2d (Scons (Scons (Scons Snil (Ssym "def")) (Ssym v)) e) = Ldef v (s2l e)

    (Scons (Scons Snil (Ssym "+")) (Scons (Scons (Scons Snil (Ssym ":")) (Snum 2)) (Ssym "Int")))
s2l (Scons (Scons Snil (Ssym   s)) right) = Lapp (Lvar s) (s2l right)

    s2l (Scons (Scons (Scons Snil (Ssym ":")) e) t) = Lhastype (s2l e) (s2t t)

right = (Scons (Scons (Scons Snil (Ssym ":")) (Snum 2)) (Ssym "Int"))

e = (Snum 2)
s2l e = Lnum 2

t = (Ssym "Int")
s2t t = Lint

Lhastype (Lnum 2) (Lint)

Lapp (Lvar "+") (Lhastype (Lnum 2) (Lint))

ghci> lexpOf "(+ (: 2 Int))"
Lapp (Lvar "+") (Lhastype (Lnum 2) Lint)













-- a efacer apres : teste
--s2l (Scons (Scons Snil (Ssym "+")) (Snum 2)) = Lapp (Lvar "+") (Lnum 2)

{-
synth tenv (Lapp e1 e2) = 
    case synth tenv e1 of
       Larw t1 t2 -> if( check tenv e2 t1 == Nothing) then t2 else error "type "
       otherwise -> error ""
-}

sexpOf "(def r3 (+ 2))" =
      Scons (Scons (Scons Snil (Ssym "def")) (Ssym "r3")) (Scons (Scons Snil (Ssym "+")) (Snum 2))
 s2d (Scons (Scons (Scons Snil (Ssym "def")) (Ssym v)) e) = Ldef v (s2l e)
    e = (Scons (Scons Snil (Ssym "+")) (Snum 2))
    s2l e = s2l (Scons (Scons Snil (Ssym "+")) (Snum 2))
            s2l (Scons (Scons Snil (Ssym s)) right) = Lapp (Lvar s) (s2l right)


lexpOf "(+ 2)"
Lapp (Lvar "+") (Lnum 2)